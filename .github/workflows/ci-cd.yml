name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package --no-transfer-progress

      - name: Run unit and integration tests
        run: mvn test --no-transfer-progress

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  e2e:
    runs-on: ubuntu-latest
    needs: test
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
      AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
      IMAGE_NAME: hotel_service
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Set up Azure CLI
        uses: azure/cli@v2

      - name: AKS Get Credentials
        run: az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Wait for deployment
        run: kubectl rollout status deployment/hotel-service-deployment --timeout=120s

      - name: Smoke Test
        run: |
          kubectl get svc
          curl -f http://$(kubectl get svc hotel-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')/api/products || exit 1

      - name: Load Test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: k8s/loadtest.js

      - name: Export Performance Report
        run: |
          mkdir -p reports
          cp k8s/loadtest-result.json reports/

      - name: Prometheus Monitoring
        run: echo "Prometheus is assumed to be scraping /actuator/prometheus."

      - name: Grafana Dashboard
        run: echo "Grafana dashboard is assumed to be configured."

      - name: Azure Load Balancer
        run: echo "Service is exposed via Azure Load Balancer." 